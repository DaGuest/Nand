// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        do Screen.setColor(true);
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 32767 + 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24577) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands. 
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, remainder, bit;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let remainder = x - ((x / 16) * 16);
        let bit = bits[remainder];
        
        if (color) {
            let value = value | bit;
        }
        else {
            let value = value & (~bit);
        }
        
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;          // Counts how many pixel we went right
        let b = 0;          // Counts how many pixel we went down/up
        let diff = 0;

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (dx > 0) {
            if (dy > 0) {
                while ((a < (dx + 1)) & (b < (dy + 1))) {           
                    do Screen.drawPixel(x + a, y + b);
                    if (diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    }
                    else {                
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
            else {                                          // LO - RB
                while ((a < (dx + 1)) & (b > dy)) {           
                    do Screen.drawPixel(x + a, y + b);
                    if (diff > 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    }
                    else {                
                        let b = b - 1;
                        let diff = diff + dx;
                    }
                }
            }
        }
        else {
            if (dy > 0) {
                while ((a > dx) & (b < dy)) {           
                    do Screen.drawPixel(x + a, y + b);
                    if (diff > 0) {
                        let a = a - 1;
                        let diff = diff - dy;
                    }
                    else {                
                        let b = b + 1;
                        let diff = diff - dx;
                    }
                }
            }
            else {                                          
                while ((a > dx) & (b > dy)) {           
                    do Screen.drawPixel(x + a, y + b);
                    if (diff < 0) {
                        let a = a - 1;
                        let diff = diff - dy;
                    }
                    else {                
                        let b = b - 1;
                        let diff = diff + dx;
                    }
                }
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int start, end, head, i, address, dx;

        let start = Math.min(x1, x2);
        let end = Math.max(x1,x2);
        let head = ((~(start & 15)) & 15);
        
        let i = head;
        while ((i > -1) & (start < end)) {
            do Screen.drawPixel(start, y);
            let start = start + 1;
            let i = i - 1;
        }

        let address = 16384 + (32 * y) + (start / 16);
        let i = 0;
        let dx = (end - start) / 16;
        while (i < dx) {
            do Memory.poke(address, color);
            let address = address + 1;
            let i = i + 1;
        }

        let start = start + (dx * 16);
        let end = end + 1;
        while (start < end) {
            do Screen.drawPixel(start, y);
            let start = start + 1;
        }
        
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int start, end;
        let start = Math.min(y1, y2);
        let end = Math.max(y1, y2);

        while (end > (start - 1)) {
            do Screen.drawPixel(x, end);
            let end = end - 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while (i < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, startx, endx;
        if (r > 181) {
            let r = 181;
        }
        let dy = r;
        let stop = -(r+1)
        while ((dy > stop) & ((y + dy) > 0)) {
            let startx = x - Screen.pythagoras(r, dy);
            let endx = x + Screen.pythagoras(r, dy);
            do Screen.drawHorizontalLine(startx, endx, y + dy);
            let dy = dy - 1;
        }
        return;
    }

    function int pythagoras(int x, int y) {
        var int pow;
        let pow = (x * x) - (y * y);
        return Math.sqrt(pow);
    }
}
